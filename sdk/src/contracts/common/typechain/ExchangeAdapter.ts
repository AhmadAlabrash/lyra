/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ExchangeAdapterInterface extends utils.Interface {
  contractName: "ExchangeAdapter";
  functions: {
    "chainlinkFeeds(address)": FunctionFragment;
    "estimateExchangeToExactBase(address,uint256)": FunctionFragment;
    "estimateExchangeToExactQuote(address,uint256)": FunctionFragment;
    "exchangeFromExactBase(address,uint256)": FunctionFragment;
    "exchangeFromExactQuote(address,uint256)": FunctionFragment;
    "exchangeToExactBase(address,uint256)": FunctionFragment;
    "exchangeToExactBaseWithLimit(address,uint256,uint256)": FunctionFragment;
    "exchangeToExactQuote(address,uint256)": FunctionFragment;
    "exchangeToExactQuoteWithLimit(address,uint256,uint256)": FunctionFragment;
    "getSettlementPriceForMarket(address,uint256)": FunctionFragment;
    "getSpotPriceForMarket(address,uint8)": FunctionFragment;
    "isGlobalPaused()": FunctionFragment;
    "isMarketPaused(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "requireNotGlobalPaused(address)": FunctionFragment;
    "setChainlinkFeed(address,address)": FunctionFragment;
    "setGlobalPaused(bool)": FunctionFragment;
    "setMarketPaused(address,bool)": FunctionFragment;
    "setMinReturnPercent(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "chainlinkFeeds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateExchangeToExactBase",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateExchangeToExactQuote",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeFromExactBase",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeFromExactQuote",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeToExactBase",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeToExactBaseWithLimit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeToExactQuote",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeToExactQuoteWithLimit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSettlementPriceForMarket",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpotPriceForMarket",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isGlobalPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isMarketPaused",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requireNotGlobalPaused",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainlinkFeed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalPaused",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketPaused",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinReturnPercent",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "chainlinkFeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateExchangeToExactBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateExchangeToExactQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeFromExactBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeFromExactQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeToExactBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeToExactBaseWithLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeToExactQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeToExactQuoteWithLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettlementPriceForMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpotPriceForMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGlobalPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMarketPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requireNotGlobalPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainlinkFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinReturnPercent",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ExchangeAdapter extends BaseContract {
  contractName: "ExchangeAdapter";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExchangeAdapterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    chainlinkFeeds(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    estimateExchangeToExactBase(
      _optionMarket: string,
      _amountBase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { quoteNeeded: BigNumber }>;

    estimateExchangeToExactQuote(
      _optionMarket: string,
      _amountQuote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { baseNeeded: BigNumber }>;

    exchangeFromExactBase(
      _optionMarket: string,
      _amountBase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeFromExactQuote(
      optionMarket: string,
      amountQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeToExactBase(
      optionMarket: string,
      amountBase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeToExactBaseWithLimit(
      _optionMarket: string,
      _amountBase: BigNumberish,
      _quoteLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeToExactQuote(
      optionMarket: string,
      amountQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeToExactQuoteWithLimit(
      optionMarket: string,
      amountQuote: BigNumberish,
      baseLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getSettlementPriceForMarket(
      optionMarket: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { spotPrice: BigNumber }>;

    getSpotPriceForMarket(
      optionMarket: string,
      pricing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { spotPrice: BigNumber }>;

    isGlobalPaused(overrides?: CallOverrides): Promise<[boolean]>;

    isMarketPaused(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    requireNotGlobalPaused(
      optionMarket: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    setChainlinkFeed(
      _asset: string,
      _assetPriceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGlobalPaused(
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarketPaused(
      optionMarket: string,
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinReturnPercent(
      _minReturnPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  chainlinkFeeds(arg0: string, overrides?: CallOverrides): Promise<string>;

  estimateExchangeToExactBase(
    _optionMarket: string,
    _amountBase: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  estimateExchangeToExactQuote(
    _optionMarket: string,
    _amountQuote: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  exchangeFromExactBase(
    _optionMarket: string,
    _amountBase: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeFromExactQuote(
    optionMarket: string,
    amountQuote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeToExactBase(
    optionMarket: string,
    amountBase: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeToExactBaseWithLimit(
    _optionMarket: string,
    _amountBase: BigNumberish,
    _quoteLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeToExactQuote(
    optionMarket: string,
    amountQuote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeToExactQuoteWithLimit(
    optionMarket: string,
    amountQuote: BigNumberish,
    baseLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getSettlementPriceForMarket(
    optionMarket: string,
    expiry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSpotPriceForMarket(
    optionMarket: string,
    pricing: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isGlobalPaused(overrides?: CallOverrides): Promise<boolean>;

  isMarketPaused(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  requireNotGlobalPaused(
    optionMarket: string,
    overrides?: CallOverrides
  ): Promise<void>;

  setChainlinkFeed(
    _asset: string,
    _assetPriceFeed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGlobalPaused(
    isPaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarketPaused(
    optionMarket: string,
    isPaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinReturnPercent(
    _minReturnPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    chainlinkFeeds(arg0: string, overrides?: CallOverrides): Promise<string>;

    estimateExchangeToExactBase(
      _optionMarket: string,
      _amountBase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateExchangeToExactQuote(
      _optionMarket: string,
      _amountQuote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeFromExactBase(
      _optionMarket: string,
      _amountBase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeFromExactQuote(
      optionMarket: string,
      amountQuote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeToExactBase(
      optionMarket: string,
      amountBase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        quoteSpent: BigNumber;
        baseReceived: BigNumber;
      }
    >;

    exchangeToExactBaseWithLimit(
      _optionMarket: string,
      _amountBase: BigNumberish,
      _quoteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        quoteSpent: BigNumber;
        baseReceived: BigNumber;
      }
    >;

    exchangeToExactQuote(
      optionMarket: string,
      amountQuote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        baseSpent: BigNumber;
        quoteReceived: BigNumber;
      }
    >;

    exchangeToExactQuoteWithLimit(
      optionMarket: string,
      amountQuote: BigNumberish,
      baseLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        quoteSpent: BigNumber;
        baseReceived: BigNumber;
      }
    >;

    getSettlementPriceForMarket(
      optionMarket: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpotPriceForMarket(
      optionMarket: string,
      pricing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGlobalPaused(overrides?: CallOverrides): Promise<boolean>;

    isMarketPaused(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    requireNotGlobalPaused(
      optionMarket: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setChainlinkFeed(
      _asset: string,
      _assetPriceFeed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGlobalPaused(
      isPaused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketPaused(
      optionMarket: string,
      isPaused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinReturnPercent(
      _minReturnPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    chainlinkFeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    estimateExchangeToExactBase(
      _optionMarket: string,
      _amountBase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateExchangeToExactQuote(
      _optionMarket: string,
      _amountQuote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeFromExactBase(
      _optionMarket: string,
      _amountBase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeFromExactQuote(
      optionMarket: string,
      amountQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeToExactBase(
      optionMarket: string,
      amountBase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeToExactBaseWithLimit(
      _optionMarket: string,
      _amountBase: BigNumberish,
      _quoteLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeToExactQuote(
      optionMarket: string,
      amountQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeToExactQuoteWithLimit(
      optionMarket: string,
      amountQuote: BigNumberish,
      baseLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getSettlementPriceForMarket(
      optionMarket: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpotPriceForMarket(
      optionMarket: string,
      pricing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGlobalPaused(overrides?: CallOverrides): Promise<BigNumber>;

    isMarketPaused(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    requireNotGlobalPaused(
      optionMarket: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setChainlinkFeed(
      _asset: string,
      _assetPriceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGlobalPaused(
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarketPaused(
      optionMarket: string,
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinReturnPercent(
      _minReturnPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    chainlinkFeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateExchangeToExactBase(
      _optionMarket: string,
      _amountBase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateExchangeToExactQuote(
      _optionMarket: string,
      _amountQuote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchangeFromExactBase(
      _optionMarket: string,
      _amountBase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeFromExactQuote(
      optionMarket: string,
      amountQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeToExactBase(
      optionMarket: string,
      amountBase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeToExactBaseWithLimit(
      _optionMarket: string,
      _amountBase: BigNumberish,
      _quoteLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeToExactQuote(
      optionMarket: string,
      amountQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeToExactQuoteWithLimit(
      optionMarket: string,
      amountQuote: BigNumberish,
      baseLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getSettlementPriceForMarket(
      optionMarket: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpotPriceForMarket(
      optionMarket: string,
      pricing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGlobalPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isMarketPaused(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requireNotGlobalPaused(
      optionMarket: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setChainlinkFeed(
      _asset: string,
      _assetPriceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGlobalPaused(
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarketPaused(
      optionMarket: string,
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinReturnPercent(
      _minReturnPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
