/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MultiDistributorInterface extends utils.Interface {
  contractName: "MultiDistributor";
  functions: {
    "claim(address[])": FunctionFragment;
    "claimableBalances(address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "claim", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "claimableBalances",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableBalances",
    data: BytesLike
  ): Result;

  events: {
    "ClaimAdded(address,address,uint256,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimAdded"): EventFragment;
}

export type ClaimAddedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string],
  {
    rewardToken: string;
    claimer: string;
    amount: BigNumber;
    epochTimestamp: BigNumber;
    tag: string;
  }
>;

export type ClaimAddedEventFilter = TypedEventFilter<ClaimAddedEvent>;

export interface MultiDistributor extends BaseContract {
  contractName: "MultiDistributor";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MultiDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimableBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  claim(
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimableBalances(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    claim(tokens: string[], overrides?: CallOverrides): Promise<void>;

    claimableBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ClaimAdded(address,address,uint256,uint256,string)"(
      rewardToken?: string | null,
      claimer?: string | null,
      amount?: null,
      epochTimestamp?: BigNumberish | null,
      tag?: null
    ): ClaimAddedEventFilter;
    ClaimAdded(
      rewardToken?: string | null,
      claimer?: string | null,
      amount?: null,
      epochTimestamp?: BigNumberish | null,
      tag?: null
    ): ClaimAddedEventFilter;
  };

  estimateGas: {
    claim(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimableBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimableBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
