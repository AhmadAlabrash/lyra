/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace LiquidityPool {
  export type CircuitBreakerParametersStruct = {
    liquidityCBThreshold: BigNumberish;
    liquidityCBTimeout: BigNumberish;
    ivVarianceCBThreshold: BigNumberish;
    skewVarianceCBThreshold: BigNumberish;
    ivVarianceCBTimeout: BigNumberish;
    skewVarianceCBTimeout: BigNumberish;
    boardSettlementCBTimeout: BigNumberish;
    contractAdjustmentCBTimeout: BigNumberish;
  };

  export type CircuitBreakerParametersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    liquidityCBThreshold: BigNumber;
    liquidityCBTimeout: BigNumber;
    ivVarianceCBThreshold: BigNumber;
    skewVarianceCBThreshold: BigNumber;
    ivVarianceCBTimeout: BigNumber;
    skewVarianceCBTimeout: BigNumber;
    boardSettlementCBTimeout: BigNumber;
    contractAdjustmentCBTimeout: BigNumber;
  };

  export type LiquidityPoolParametersStruct = {
    minDepositWithdraw: BigNumberish;
    depositDelay: BigNumberish;
    withdrawalDelay: BigNumberish;
    withdrawalFee: BigNumberish;
    guardianMultisig: string;
    guardianDelay: BigNumberish;
    adjustmentNetScalingFactor: BigNumberish;
    callCollatScalingFactor: BigNumberish;
    putCollatScalingFactor: BigNumberish;
  };

  export type LiquidityPoolParametersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    minDepositWithdraw: BigNumber;
    depositDelay: BigNumber;
    withdrawalDelay: BigNumber;
    withdrawalFee: BigNumber;
    guardianMultisig: string;
    guardianDelay: BigNumber;
    adjustmentNetScalingFactor: BigNumber;
    callCollatScalingFactor: BigNumber;
    putCollatScalingFactor: BigNumber;
  };

  export type LiquidityStruct = {
    freeLiquidity: BigNumberish;
    burnableLiquidity: BigNumberish;
    reservedCollatLiquidity: BigNumberish;
    pendingDeltaLiquidity: BigNumberish;
    usedDeltaLiquidity: BigNumberish;
    NAV: BigNumberish;
    longScaleFactor: BigNumberish;
  };

  export type LiquidityStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    freeLiquidity: BigNumber;
    burnableLiquidity: BigNumber;
    reservedCollatLiquidity: BigNumber;
    pendingDeltaLiquidity: BigNumber;
    usedDeltaLiquidity: BigNumber;
    NAV: BigNumber;
    longScaleFactor: BigNumber;
  };
}

export interface LiquidityPoolInterface extends utils.Interface {
  contractName: "LiquidityPool";
  functions: {
    "CBTimestamp()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "boardSettlement(uint256,uint256,uint256,uint256)": FunctionFragment;
    "cbParams()": FunctionFragment;
    "exchangeBase()": FunctionFragment;
    "freeCallCollateralAndSendPremium(uint256,address,uint256,uint256,uint256)": FunctionFragment;
    "freePutCollateralAndSendPremium(uint256,address,uint256,uint256,uint256)": FunctionFragment;
    "getCBParams()": FunctionFragment;
    "getLiquidity()": FunctionFragment;
    "getLpParams()": FunctionFragment;
    "getTokenPrice()": FunctionFragment;
    "getTokenPriceWithCheck()": FunctionFragment;
    "getTotalPoolValueQuote()": FunctionFragment;
    "getTotalTokenSupply()": FunctionFragment;
    "init(address,address,address,address,address,address,address,address)": FunctionFragment;
    "initiateDeposit(address,uint256)": FunctionFragment;
    "initiateWithdraw(address,uint256)": FunctionFragment;
    "insolventSettlementAmount()": FunctionFragment;
    "liquidationInsolventAmount()": FunctionFragment;
    "lockCallCollateral(uint256,uint256,uint256)": FunctionFragment;
    "lockPutCollateral(uint256,uint256)": FunctionFragment;
    "lockedCollateral()": FunctionFragment;
    "lpParams()": FunctionFragment;
    "nextQueuedDepositId()": FunctionFragment;
    "nextQueuedWithdrawalId()": FunctionFragment;
    "nominateNewOwner(address)": FunctionFragment;
    "nominatedOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "poolHedger()": FunctionFragment;
    "processDepositQueue(uint256)": FunctionFragment;
    "processWithdrawalQueue(uint256)": FunctionFragment;
    "protectedQuote()": FunctionFragment;
    "queuedDepositHead()": FunctionFragment;
    "queuedDeposits(uint256)": FunctionFragment;
    "queuedWithdrawalHead()": FunctionFragment;
    "queuedWithdrawals(uint256)": FunctionFragment;
    "quoteAsset()": FunctionFragment;
    "reclaimInsolventBase(uint256)": FunctionFragment;
    "reclaimInsolventQuote(uint256)": FunctionFragment;
    "sendSettlementValue(address,uint256)": FunctionFragment;
    "sendShortPremium(address,uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "setCircuitBreakerParameters((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "setLiquidityPoolParameters((uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256))": FunctionFragment;
    "setPoolHedger(address)": FunctionFragment;
    "totalOutstandingSettlements()": FunctionFragment;
    "totalQueuedDeposits()": FunctionFragment;
    "totalQueuedWithdrawals()": FunctionFragment;
    "transferQuoteToHedge(uint256)": FunctionFragment;
    "updateCBs()": FunctionFragment;
    "updateLiquidationInsolvency(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CBTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "boardSettlement",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cbParams", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exchangeBase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "freeCallCollateralAndSendPremium",
    values: [BigNumberish, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freePutCollateralAndSendPremium",
    values: [BigNumberish, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCBParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLpParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPriceWithCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPoolValueQuote",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalTokenSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string, string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateDeposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateWithdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "insolventSettlementAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationInsolventAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockCallCollateral",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockPutCollateral",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lpParams", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextQueuedDepositId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextQueuedWithdrawalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nominateNewOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolHedger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processDepositQueue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processWithdrawalQueue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protectedQuote",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queuedDepositHead",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queuedDeposits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queuedWithdrawalHead",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queuedWithdrawals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reclaimInsolventBase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reclaimInsolventQuote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendSettlementValue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendShortPremium",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCircuitBreakerParameters",
    values: [LiquidityPool.CircuitBreakerParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityPoolParameters",
    values: [LiquidityPool.LiquidityPoolParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolHedger",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalOutstandingSettlements",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalQueuedDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalQueuedWithdrawals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferQuoteToHedge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "updateCBs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateLiquidationInsolvency",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CBTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boardSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cbParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freeCallCollateralAndSendPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freePutCollateralAndSendPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCBParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLpParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPriceWithCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPoolValueQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalTokenSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insolventSettlementAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationInsolventAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockCallCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockPutCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextQueuedDepositId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextQueuedWithdrawalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominateNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolHedger", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processDepositQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processWithdrawalQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protectedQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuedDepositHead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuedDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuedWithdrawalHead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuedWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quoteAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reclaimInsolventBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reclaimInsolventQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendSettlementValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendShortPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCircuitBreakerParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityPoolParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolHedger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalOutstandingSettlements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalQueuedDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalQueuedWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferQuoteToHedge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateCBs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateLiquidationInsolvency",
    data: BytesLike
  ): Result;

  events: {
    "BasePurchased(uint256,uint256)": EventFragment;
    "BaseSold(uint256,uint256)": EventFragment;
    "BoardSettlement(uint256,uint256,uint256)": EventFragment;
    "BoardSettlementCircuitBreakerUpdated(uint256)": EventFragment;
    "CallCollateralFreed(uint256,uint256)": EventFragment;
    "CallCollateralLocked(uint256,uint256)": EventFragment;
    "CheckingCanProcess(uint256,bool,bool,bool,bool)": EventFragment;
    "CircuitBreakerParametersUpdated(tuple)": EventFragment;
    "CircuitBreakerUpdated(uint256,bool,bool,bool,bool)": EventFragment;
    "DepositProcessed(address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "DepositQueued(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "InsolventSettlementAmountUpdated(uint256,uint256)": EventFragment;
    "LiquidityPoolParametersUpdated(tuple)": EventFragment;
    "OutstandingSettlementSent(address,uint256,uint256)": EventFragment;
    "OwnerChanged(address,address)": EventFragment;
    "OwnerNominated(address)": EventFragment;
    "PoolHedgerUpdated(address)": EventFragment;
    "PremiumTransferred(address,uint256,uint256)": EventFragment;
    "PutCollateralFreed(uint256,uint256)": EventFragment;
    "PutCollateralLocked(uint256,uint256)": EventFragment;
    "QuoteTransferredToPoolHedger(uint256)": EventFragment;
    "WithdrawPartiallyProcessed(address,address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "WithdrawProcessed(address,address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "WithdrawQueued(address,address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BasePurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoardSettlement"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BoardSettlementCircuitBreakerUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CallCollateralFreed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CallCollateralLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CheckingCanProcess"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CircuitBreakerParametersUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CircuitBreakerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositProcessed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositQueued"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "InsolventSettlementAmountUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidityPoolParametersUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OutstandingSettlementSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerNominated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolHedgerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PremiumTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PutCollateralFreed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PutCollateralLocked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "QuoteTransferredToPoolHedger"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawPartiallyProcessed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawProcessed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawQueued"): EventFragment;
}

export type BasePurchasedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { quoteSpent: BigNumber; baseReceived: BigNumber }
>;

export type BasePurchasedEventFilter = TypedEventFilter<BasePurchasedEvent>;

export type BaseSoldEvent = TypedEvent<
  [BigNumber, BigNumber],
  { amountBase: BigNumber; quoteReceived: BigNumber }
>;

export type BaseSoldEventFilter = TypedEventFilter<BaseSoldEvent>;

export type BoardSettlementEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  {
    insolventSettlementAmount: BigNumber;
    amountQuoteReserved: BigNumber;
    totalOutstandingSettlements: BigNumber;
  }
>;

export type BoardSettlementEventFilter = TypedEventFilter<BoardSettlementEvent>;

export type BoardSettlementCircuitBreakerUpdatedEvent = TypedEvent<
  [BigNumber],
  { newTimestamp: BigNumber }
>;

export type BoardSettlementCircuitBreakerUpdatedEventFilter =
  TypedEventFilter<BoardSettlementCircuitBreakerUpdatedEvent>;

export type CallCollateralFreedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { baseFreed: BigNumber; lockedCollateralBase: BigNumber }
>;

export type CallCollateralFreedEventFilter =
  TypedEventFilter<CallCollateralFreedEvent>;

export type CallCollateralLockedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { baseLocked: BigNumber; lockedCollateralBase: BigNumber }
>;

export type CallCollateralLockedEventFilter =
  TypedEventFilter<CallCollateralLockedEvent>;

export type CheckingCanProcessEvent = TypedEvent<
  [BigNumber, boolean, boolean, boolean, boolean],
  {
    entryId: BigNumber;
    boardNotStale: boolean;
    validEntry: boolean;
    guardianBypass: boolean;
    delaysExpired: boolean;
  }
>;

export type CheckingCanProcessEventFilter =
  TypedEventFilter<CheckingCanProcessEvent>;

export type CircuitBreakerParametersUpdatedEvent = TypedEvent<
  [LiquidityPool.CircuitBreakerParametersStructOutput],
  { cbParams: LiquidityPool.CircuitBreakerParametersStructOutput }
>;

export type CircuitBreakerParametersUpdatedEventFilter =
  TypedEventFilter<CircuitBreakerParametersUpdatedEvent>;

export type CircuitBreakerUpdatedEvent = TypedEvent<
  [BigNumber, boolean, boolean, boolean, boolean],
  {
    newTimestamp: BigNumber;
    ivVarianceThresholdCrossed: boolean;
    skewVarianceThresholdCrossed: boolean;
    liquidityThresholdCrossed: boolean;
    contractAdjustmentEvent: boolean;
  }
>;

export type CircuitBreakerUpdatedEventFilter =
  TypedEventFilter<CircuitBreakerUpdatedEvent>;

export type DepositProcessedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    caller: string;
    beneficiary: string;
    depositQueueId: BigNumber;
    amountDeposited: BigNumber;
    tokenPrice: BigNumber;
    tokensReceived: BigNumber;
    timestamp: BigNumber;
  }
>;

export type DepositProcessedEventFilter =
  TypedEventFilter<DepositProcessedEvent>;

export type DepositQueuedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    depositor: string;
    beneficiary: string;
    depositQueueId: BigNumber;
    amountDeposited: BigNumber;
    totalQueuedDeposits: BigNumber;
    timestamp: BigNumber;
  }
>;

export type DepositQueuedEventFilter = TypedEventFilter<DepositQueuedEvent>;

export type InsolventSettlementAmountUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { amountQuoteAdded: BigNumber; totalInsolventSettlementAmount: BigNumber }
>;

export type InsolventSettlementAmountUpdatedEventFilter =
  TypedEventFilter<InsolventSettlementAmountUpdatedEvent>;

export type LiquidityPoolParametersUpdatedEvent = TypedEvent<
  [LiquidityPool.LiquidityPoolParametersStructOutput],
  { lpParams: LiquidityPool.LiquidityPoolParametersStructOutput }
>;

export type LiquidityPoolParametersUpdatedEventFilter =
  TypedEventFilter<LiquidityPoolParametersUpdatedEvent>;

export type OutstandingSettlementSentEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; amount: BigNumber; totalOutstandingSettlements: BigNumber }
>;

export type OutstandingSettlementSentEventFilter =
  TypedEventFilter<OutstandingSettlementSentEvent>;

export type OwnerChangedEvent = TypedEvent<
  [string, string],
  { oldOwner: string; newOwner: string }
>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export type OwnerNominatedEvent = TypedEvent<[string], { newOwner: string }>;

export type OwnerNominatedEventFilter = TypedEventFilter<OwnerNominatedEvent>;

export type PoolHedgerUpdatedEvent = TypedEvent<
  [string],
  { poolHedger: string }
>;

export type PoolHedgerUpdatedEventFilter =
  TypedEventFilter<PoolHedgerUpdatedEvent>;

export type PremiumTransferredEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  {
    recipient: string;
    recipientPortion: BigNumber;
    optionMarketPortion: BigNumber;
  }
>;

export type PremiumTransferredEventFilter =
  TypedEventFilter<PremiumTransferredEvent>;

export type PutCollateralFreedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { quoteFreed: BigNumber; lockedCollateralQuote: BigNumber }
>;

export type PutCollateralFreedEventFilter =
  TypedEventFilter<PutCollateralFreedEvent>;

export type PutCollateralLockedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { quoteLocked: BigNumber; lockedCollateralQuote: BigNumber }
>;

export type PutCollateralLockedEventFilter =
  TypedEventFilter<PutCollateralLockedEvent>;

export type QuoteTransferredToPoolHedgerEvent = TypedEvent<
  [BigNumber],
  { amountQuote: BigNumber }
>;

export type QuoteTransferredToPoolHedgerEventFilter =
  TypedEventFilter<QuoteTransferredToPoolHedgerEvent>;

export type WithdrawPartiallyProcessedEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    caller: string;
    beneficiary: string;
    withdrawalQueueId: BigNumber;
    amountWithdrawn: BigNumber;
    tokenPrice: BigNumber;
    quoteReceived: BigNumber;
    totalQueuedWithdrawals: BigNumber;
    timestamp: BigNumber;
  }
>;

export type WithdrawPartiallyProcessedEventFilter =
  TypedEventFilter<WithdrawPartiallyProcessedEvent>;

export type WithdrawProcessedEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    caller: string;
    beneficiary: string;
    withdrawalQueueId: BigNumber;
    amountWithdrawn: BigNumber;
    tokenPrice: BigNumber;
    quoteReceived: BigNumber;
    totalQueuedWithdrawals: BigNumber;
    timestamp: BigNumber;
  }
>;

export type WithdrawProcessedEventFilter =
  TypedEventFilter<WithdrawProcessedEvent>;

export type WithdrawQueuedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    withdrawer: string;
    beneficiary: string;
    withdrawalQueueId: BigNumber;
    amountWithdrawn: BigNumber;
    totalQueuedWithdrawals: BigNumber;
    timestamp: BigNumber;
  }
>;

export type WithdrawQueuedEventFilter = TypedEventFilter<WithdrawQueuedEvent>;

export interface LiquidityPool extends BaseContract {
  contractName: "LiquidityPool";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidityPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CBTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    boardSettlement(
      insolventSettlements: BigNumberish,
      amountQuoteFreed: BigNumberish,
      amountQuoteReserved: BigNumberish,
      amountBaseFreed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cbParams(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        liquidityCBThreshold: BigNumber;
        liquidityCBTimeout: BigNumber;
        ivVarianceCBThreshold: BigNumber;
        skewVarianceCBThreshold: BigNumber;
        ivVarianceCBTimeout: BigNumber;
        skewVarianceCBTimeout: BigNumber;
        boardSettlementCBTimeout: BigNumber;
        contractAdjustmentCBTimeout: BigNumber;
      }
    >;

    exchangeBase(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    freeCallCollateralAndSendPremium(
      amountBase: BigNumberish,
      recipient: string,
      totalCost: BigNumberish,
      reservedFee: BigNumberish,
      longScaleFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    freePutCollateralAndSendPremium(
      amountQuoteFreed: BigNumberish,
      recipient: string,
      totalCost: BigNumberish,
      reservedFee: BigNumberish,
      longScaleFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCBParams(
      overrides?: CallOverrides
    ): Promise<[LiquidityPool.CircuitBreakerParametersStructOutput]>;

    getLiquidity(
      overrides?: CallOverrides
    ): Promise<[LiquidityPool.LiquidityStructOutput]>;

    getLpParams(
      overrides?: CallOverrides
    ): Promise<[LiquidityPool.LiquidityPoolParametersStructOutput]>;

    getTokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenPriceWithCheck(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        tokenPrice: BigNumber;
        isStale: boolean;
        circuitBreakerExpiry: BigNumber;
      }
    >;

    getTotalPoolValueQuote(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalPoolValue: BigNumber }>;

    getTotalTokenSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    init(
      _exchangeAdapter: string,
      _optionMarket: string,
      _liquidityToken: string,
      _greekCache: string,
      _poolHedger: string,
      _shortCollateral: string,
      _quoteAsset: string,
      _baseAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initiateDeposit(
      beneficiary: string,
      amountQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initiateWithdraw(
      beneficiary: string,
      amountLiquidityToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    insolventSettlementAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidationInsolventAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockCallCollateral(
      amount: BigNumberish,
      spotPrice: BigNumberish,
      freeLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockPutCollateral(
      amount: BigNumberish,
      freeLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockedCollateral(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { quote: BigNumber; base: BigNumber }>;

    lpParams(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        minDepositWithdraw: BigNumber;
        depositDelay: BigNumber;
        withdrawalDelay: BigNumber;
        withdrawalFee: BigNumber;
        guardianMultisig: string;
        guardianDelay: BigNumber;
        adjustmentNetScalingFactor: BigNumber;
        callCollatScalingFactor: BigNumber;
        putCollatScalingFactor: BigNumber;
      }
    >;

    nextQueuedDepositId(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextQueuedWithdrawalId(overrides?: CallOverrides): Promise<[BigNumber]>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolHedger(overrides?: CallOverrides): Promise<[string]>;

    processDepositQueue(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    processWithdrawalQueue(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    protectedQuote(overrides?: CallOverrides): Promise<[BigNumber]>;

    queuedDepositHead(overrides?: CallOverrides): Promise<[BigNumber]>;

    queuedDeposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        beneficiary: string;
        amountLiquidity: BigNumber;
        mintedTokens: BigNumber;
        depositInitiatedTime: BigNumber;
      }
    >;

    queuedWithdrawalHead(overrides?: CallOverrides): Promise<[BigNumber]>;

    queuedWithdrawals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        beneficiary: string;
        amountTokens: BigNumber;
        quoteSent: BigNumber;
        withdrawInitiatedTime: BigNumber;
      }
    >;

    quoteAsset(overrides?: CallOverrides): Promise<[string]>;

    reclaimInsolventBase(
      amountBase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reclaimInsolventQuote(
      amountQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendSettlementValue(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendShortPremium(
      recipient: string,
      amountContracts: BigNumberish,
      premium: BigNumberish,
      freeLiquidity: BigNumberish,
      reservedFee: BigNumberish,
      isCall: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCircuitBreakerParameters(
      _cbParams: LiquidityPool.CircuitBreakerParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidityPoolParameters(
      _lpParams: LiquidityPool.LiquidityPoolParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolHedger(
      newPoolHedger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalOutstandingSettlements(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalQueuedDeposits(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalQueuedWithdrawals(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferQuoteToHedge(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCBs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLiquidationInsolvency(
      insolvencyAmountInQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CBTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  boardSettlement(
    insolventSettlements: BigNumberish,
    amountQuoteFreed: BigNumberish,
    amountQuoteReserved: BigNumberish,
    amountBaseFreed: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cbParams(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      liquidityCBThreshold: BigNumber;
      liquidityCBTimeout: BigNumber;
      ivVarianceCBThreshold: BigNumber;
      skewVarianceCBThreshold: BigNumber;
      ivVarianceCBTimeout: BigNumber;
      skewVarianceCBTimeout: BigNumber;
      boardSettlementCBTimeout: BigNumber;
      contractAdjustmentCBTimeout: BigNumber;
    }
  >;

  exchangeBase(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  freeCallCollateralAndSendPremium(
    amountBase: BigNumberish,
    recipient: string,
    totalCost: BigNumberish,
    reservedFee: BigNumberish,
    longScaleFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  freePutCollateralAndSendPremium(
    amountQuoteFreed: BigNumberish,
    recipient: string,
    totalCost: BigNumberish,
    reservedFee: BigNumberish,
    longScaleFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCBParams(
    overrides?: CallOverrides
  ): Promise<LiquidityPool.CircuitBreakerParametersStructOutput>;

  getLiquidity(
    overrides?: CallOverrides
  ): Promise<LiquidityPool.LiquidityStructOutput>;

  getLpParams(
    overrides?: CallOverrides
  ): Promise<LiquidityPool.LiquidityPoolParametersStructOutput>;

  getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenPriceWithCheck(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber] & {
      tokenPrice: BigNumber;
      isStale: boolean;
      circuitBreakerExpiry: BigNumber;
    }
  >;

  getTotalPoolValueQuote(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

  init(
    _exchangeAdapter: string,
    _optionMarket: string,
    _liquidityToken: string,
    _greekCache: string,
    _poolHedger: string,
    _shortCollateral: string,
    _quoteAsset: string,
    _baseAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initiateDeposit(
    beneficiary: string,
    amountQuote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initiateWithdraw(
    beneficiary: string,
    amountLiquidityToken: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  insolventSettlementAmount(overrides?: CallOverrides): Promise<BigNumber>;

  liquidationInsolventAmount(overrides?: CallOverrides): Promise<BigNumber>;

  lockCallCollateral(
    amount: BigNumberish,
    spotPrice: BigNumberish,
    freeLiquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockPutCollateral(
    amount: BigNumberish,
    freeLiquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockedCollateral(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { quote: BigNumber; base: BigNumber }>;

  lpParams(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      minDepositWithdraw: BigNumber;
      depositDelay: BigNumber;
      withdrawalDelay: BigNumber;
      withdrawalFee: BigNumber;
      guardianMultisig: string;
      guardianDelay: BigNumber;
      adjustmentNetScalingFactor: BigNumber;
      callCollatScalingFactor: BigNumber;
      putCollatScalingFactor: BigNumber;
    }
  >;

  nextQueuedDepositId(overrides?: CallOverrides): Promise<BigNumber>;

  nextQueuedWithdrawalId(overrides?: CallOverrides): Promise<BigNumber>;

  nominateNewOwner(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolHedger(overrides?: CallOverrides): Promise<string>;

  processDepositQueue(
    limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  processWithdrawalQueue(
    limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  protectedQuote(overrides?: CallOverrides): Promise<BigNumber>;

  queuedDepositHead(overrides?: CallOverrides): Promise<BigNumber>;

  queuedDeposits(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, BigNumber] & {
      id: BigNumber;
      beneficiary: string;
      amountLiquidity: BigNumber;
      mintedTokens: BigNumber;
      depositInitiatedTime: BigNumber;
    }
  >;

  queuedWithdrawalHead(overrides?: CallOverrides): Promise<BigNumber>;

  queuedWithdrawals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, BigNumber] & {
      id: BigNumber;
      beneficiary: string;
      amountTokens: BigNumber;
      quoteSent: BigNumber;
      withdrawInitiatedTime: BigNumber;
    }
  >;

  quoteAsset(overrides?: CallOverrides): Promise<string>;

  reclaimInsolventBase(
    amountBase: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reclaimInsolventQuote(
    amountQuote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendSettlementValue(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendShortPremium(
    recipient: string,
    amountContracts: BigNumberish,
    premium: BigNumberish,
    freeLiquidity: BigNumberish,
    reservedFee: BigNumberish,
    isCall: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCircuitBreakerParameters(
    _cbParams: LiquidityPool.CircuitBreakerParametersStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidityPoolParameters(
    _lpParams: LiquidityPool.LiquidityPoolParametersStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolHedger(
    newPoolHedger: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalOutstandingSettlements(overrides?: CallOverrides): Promise<BigNumber>;

  totalQueuedDeposits(overrides?: CallOverrides): Promise<BigNumber>;

  totalQueuedWithdrawals(overrides?: CallOverrides): Promise<BigNumber>;

  transferQuoteToHedge(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCBs(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLiquidationInsolvency(
    insolvencyAmountInQuote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CBTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    boardSettlement(
      insolventSettlements: BigNumberish,
      amountQuoteFreed: BigNumberish,
      amountQuoteReserved: BigNumberish,
      amountBaseFreed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cbParams(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        liquidityCBThreshold: BigNumber;
        liquidityCBTimeout: BigNumber;
        ivVarianceCBThreshold: BigNumber;
        skewVarianceCBThreshold: BigNumber;
        ivVarianceCBTimeout: BigNumber;
        skewVarianceCBTimeout: BigNumber;
        boardSettlementCBTimeout: BigNumber;
        contractAdjustmentCBTimeout: BigNumber;
      }
    >;

    exchangeBase(overrides?: CallOverrides): Promise<void>;

    freeCallCollateralAndSendPremium(
      amountBase: BigNumberish,
      recipient: string,
      totalCost: BigNumberish,
      reservedFee: BigNumberish,
      longScaleFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    freePutCollateralAndSendPremium(
      amountQuoteFreed: BigNumberish,
      recipient: string,
      totalCost: BigNumberish,
      reservedFee: BigNumberish,
      longScaleFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCBParams(
      overrides?: CallOverrides
    ): Promise<LiquidityPool.CircuitBreakerParametersStructOutput>;

    getLiquidity(
      overrides?: CallOverrides
    ): Promise<LiquidityPool.LiquidityStructOutput>;

    getLpParams(
      overrides?: CallOverrides
    ): Promise<LiquidityPool.LiquidityPoolParametersStructOutput>;

    getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenPriceWithCheck(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        tokenPrice: BigNumber;
        isStale: boolean;
        circuitBreakerExpiry: BigNumber;
      }
    >;

    getTotalPoolValueQuote(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _exchangeAdapter: string,
      _optionMarket: string,
      _liquidityToken: string,
      _greekCache: string,
      _poolHedger: string,
      _shortCollateral: string,
      _quoteAsset: string,
      _baseAsset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateDeposit(
      beneficiary: string,
      amountQuote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateWithdraw(
      beneficiary: string,
      amountLiquidityToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    insolventSettlementAmount(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationInsolventAmount(overrides?: CallOverrides): Promise<BigNumber>;

    lockCallCollateral(
      amount: BigNumberish,
      spotPrice: BigNumberish,
      freeLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockPutCollateral(
      amount: BigNumberish,
      freeLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockedCollateral(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { quote: BigNumber; base: BigNumber }>;

    lpParams(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        minDepositWithdraw: BigNumber;
        depositDelay: BigNumber;
        withdrawalDelay: BigNumber;
        withdrawalFee: BigNumber;
        guardianMultisig: string;
        guardianDelay: BigNumber;
        adjustmentNetScalingFactor: BigNumber;
        callCollatScalingFactor: BigNumber;
        putCollatScalingFactor: BigNumber;
      }
    >;

    nextQueuedDepositId(overrides?: CallOverrides): Promise<BigNumber>;

    nextQueuedWithdrawalId(overrides?: CallOverrides): Promise<BigNumber>;

    nominateNewOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolHedger(overrides?: CallOverrides): Promise<string>;

    processDepositQueue(
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    processWithdrawalQueue(
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    protectedQuote(overrides?: CallOverrides): Promise<BigNumber>;

    queuedDepositHead(overrides?: CallOverrides): Promise<BigNumber>;

    queuedDeposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        beneficiary: string;
        amountLiquidity: BigNumber;
        mintedTokens: BigNumber;
        depositInitiatedTime: BigNumber;
      }
    >;

    queuedWithdrawalHead(overrides?: CallOverrides): Promise<BigNumber>;

    queuedWithdrawals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        beneficiary: string;
        amountTokens: BigNumber;
        quoteSent: BigNumber;
        withdrawInitiatedTime: BigNumber;
      }
    >;

    quoteAsset(overrides?: CallOverrides): Promise<string>;

    reclaimInsolventBase(
      amountBase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reclaimInsolventQuote(
      amountQuote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendSettlementValue(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendShortPremium(
      recipient: string,
      amountContracts: BigNumberish,
      premium: BigNumberish,
      freeLiquidity: BigNumberish,
      reservedFee: BigNumberish,
      isCall: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setCircuitBreakerParameters(
      _cbParams: LiquidityPool.CircuitBreakerParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityPoolParameters(
      _lpParams: LiquidityPool.LiquidityPoolParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolHedger(
      newPoolHedger: string,
      overrides?: CallOverrides
    ): Promise<void>;

    totalOutstandingSettlements(overrides?: CallOverrides): Promise<BigNumber>;

    totalQueuedDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    totalQueuedWithdrawals(overrides?: CallOverrides): Promise<BigNumber>;

    transferQuoteToHedge(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateCBs(overrides?: CallOverrides): Promise<void>;

    updateLiquidationInsolvency(
      insolvencyAmountInQuote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BasePurchased(uint256,uint256)"(
      quoteSpent?: null,
      baseReceived?: null
    ): BasePurchasedEventFilter;
    BasePurchased(
      quoteSpent?: null,
      baseReceived?: null
    ): BasePurchasedEventFilter;

    "BaseSold(uint256,uint256)"(
      amountBase?: null,
      quoteReceived?: null
    ): BaseSoldEventFilter;
    BaseSold(amountBase?: null, quoteReceived?: null): BaseSoldEventFilter;

    "BoardSettlement(uint256,uint256,uint256)"(
      insolventSettlementAmount?: null,
      amountQuoteReserved?: null,
      totalOutstandingSettlements?: null
    ): BoardSettlementEventFilter;
    BoardSettlement(
      insolventSettlementAmount?: null,
      amountQuoteReserved?: null,
      totalOutstandingSettlements?: null
    ): BoardSettlementEventFilter;

    "BoardSettlementCircuitBreakerUpdated(uint256)"(
      newTimestamp?: null
    ): BoardSettlementCircuitBreakerUpdatedEventFilter;
    BoardSettlementCircuitBreakerUpdated(
      newTimestamp?: null
    ): BoardSettlementCircuitBreakerUpdatedEventFilter;

    "CallCollateralFreed(uint256,uint256)"(
      baseFreed?: null,
      lockedCollateralBase?: null
    ): CallCollateralFreedEventFilter;
    CallCollateralFreed(
      baseFreed?: null,
      lockedCollateralBase?: null
    ): CallCollateralFreedEventFilter;

    "CallCollateralLocked(uint256,uint256)"(
      baseLocked?: null,
      lockedCollateralBase?: null
    ): CallCollateralLockedEventFilter;
    CallCollateralLocked(
      baseLocked?: null,
      lockedCollateralBase?: null
    ): CallCollateralLockedEventFilter;

    "CheckingCanProcess(uint256,bool,bool,bool,bool)"(
      entryId?: null,
      boardNotStale?: null,
      validEntry?: null,
      guardianBypass?: null,
      delaysExpired?: null
    ): CheckingCanProcessEventFilter;
    CheckingCanProcess(
      entryId?: null,
      boardNotStale?: null,
      validEntry?: null,
      guardianBypass?: null,
      delaysExpired?: null
    ): CheckingCanProcessEventFilter;

    "CircuitBreakerParametersUpdated(tuple)"(
      cbParams?: null
    ): CircuitBreakerParametersUpdatedEventFilter;
    CircuitBreakerParametersUpdated(
      cbParams?: null
    ): CircuitBreakerParametersUpdatedEventFilter;

    "CircuitBreakerUpdated(uint256,bool,bool,bool,bool)"(
      newTimestamp?: null,
      ivVarianceThresholdCrossed?: null,
      skewVarianceThresholdCrossed?: null,
      liquidityThresholdCrossed?: null,
      contractAdjustmentEvent?: null
    ): CircuitBreakerUpdatedEventFilter;
    CircuitBreakerUpdated(
      newTimestamp?: null,
      ivVarianceThresholdCrossed?: null,
      skewVarianceThresholdCrossed?: null,
      liquidityThresholdCrossed?: null,
      contractAdjustmentEvent?: null
    ): CircuitBreakerUpdatedEventFilter;

    "DepositProcessed(address,address,uint256,uint256,uint256,uint256,uint256)"(
      caller?: string | null,
      beneficiary?: string | null,
      depositQueueId?: BigNumberish | null,
      amountDeposited?: null,
      tokenPrice?: null,
      tokensReceived?: null,
      timestamp?: null
    ): DepositProcessedEventFilter;
    DepositProcessed(
      caller?: string | null,
      beneficiary?: string | null,
      depositQueueId?: BigNumberish | null,
      amountDeposited?: null,
      tokenPrice?: null,
      tokensReceived?: null,
      timestamp?: null
    ): DepositProcessedEventFilter;

    "DepositQueued(address,address,uint256,uint256,uint256,uint256)"(
      depositor?: string | null,
      beneficiary?: string | null,
      depositQueueId?: BigNumberish | null,
      amountDeposited?: null,
      totalQueuedDeposits?: null,
      timestamp?: null
    ): DepositQueuedEventFilter;
    DepositQueued(
      depositor?: string | null,
      beneficiary?: string | null,
      depositQueueId?: BigNumberish | null,
      amountDeposited?: null,
      totalQueuedDeposits?: null,
      timestamp?: null
    ): DepositQueuedEventFilter;

    "InsolventSettlementAmountUpdated(uint256,uint256)"(
      amountQuoteAdded?: null,
      totalInsolventSettlementAmount?: null
    ): InsolventSettlementAmountUpdatedEventFilter;
    InsolventSettlementAmountUpdated(
      amountQuoteAdded?: null,
      totalInsolventSettlementAmount?: null
    ): InsolventSettlementAmountUpdatedEventFilter;

    "LiquidityPoolParametersUpdated(tuple)"(
      lpParams?: null
    ): LiquidityPoolParametersUpdatedEventFilter;
    LiquidityPoolParametersUpdated(
      lpParams?: null
    ): LiquidityPoolParametersUpdatedEventFilter;

    "OutstandingSettlementSent(address,uint256,uint256)"(
      user?: string | null,
      amount?: null,
      totalOutstandingSettlements?: null
    ): OutstandingSettlementSentEventFilter;
    OutstandingSettlementSent(
      user?: string | null,
      amount?: null,
      totalOutstandingSettlements?: null
    ): OutstandingSettlementSentEventFilter;

    "OwnerChanged(address,address)"(
      oldOwner?: null,
      newOwner?: null
    ): OwnerChangedEventFilter;
    OwnerChanged(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;

    "OwnerNominated(address)"(newOwner?: null): OwnerNominatedEventFilter;
    OwnerNominated(newOwner?: null): OwnerNominatedEventFilter;

    "PoolHedgerUpdated(address)"(
      poolHedger?: null
    ): PoolHedgerUpdatedEventFilter;
    PoolHedgerUpdated(poolHedger?: null): PoolHedgerUpdatedEventFilter;

    "PremiumTransferred(address,uint256,uint256)"(
      recipient?: string | null,
      recipientPortion?: null,
      optionMarketPortion?: null
    ): PremiumTransferredEventFilter;
    PremiumTransferred(
      recipient?: string | null,
      recipientPortion?: null,
      optionMarketPortion?: null
    ): PremiumTransferredEventFilter;

    "PutCollateralFreed(uint256,uint256)"(
      quoteFreed?: null,
      lockedCollateralQuote?: null
    ): PutCollateralFreedEventFilter;
    PutCollateralFreed(
      quoteFreed?: null,
      lockedCollateralQuote?: null
    ): PutCollateralFreedEventFilter;

    "PutCollateralLocked(uint256,uint256)"(
      quoteLocked?: null,
      lockedCollateralQuote?: null
    ): PutCollateralLockedEventFilter;
    PutCollateralLocked(
      quoteLocked?: null,
      lockedCollateralQuote?: null
    ): PutCollateralLockedEventFilter;

    "QuoteTransferredToPoolHedger(uint256)"(
      amountQuote?: null
    ): QuoteTransferredToPoolHedgerEventFilter;
    QuoteTransferredToPoolHedger(
      amountQuote?: null
    ): QuoteTransferredToPoolHedgerEventFilter;

    "WithdrawPartiallyProcessed(address,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      caller?: string | null,
      beneficiary?: string | null,
      withdrawalQueueId?: BigNumberish | null,
      amountWithdrawn?: null,
      tokenPrice?: null,
      quoteReceived?: null,
      totalQueuedWithdrawals?: null,
      timestamp?: null
    ): WithdrawPartiallyProcessedEventFilter;
    WithdrawPartiallyProcessed(
      caller?: string | null,
      beneficiary?: string | null,
      withdrawalQueueId?: BigNumberish | null,
      amountWithdrawn?: null,
      tokenPrice?: null,
      quoteReceived?: null,
      totalQueuedWithdrawals?: null,
      timestamp?: null
    ): WithdrawPartiallyProcessedEventFilter;

    "WithdrawProcessed(address,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      caller?: string | null,
      beneficiary?: string | null,
      withdrawalQueueId?: BigNumberish | null,
      amountWithdrawn?: null,
      tokenPrice?: null,
      quoteReceived?: null,
      totalQueuedWithdrawals?: null,
      timestamp?: null
    ): WithdrawProcessedEventFilter;
    WithdrawProcessed(
      caller?: string | null,
      beneficiary?: string | null,
      withdrawalQueueId?: BigNumberish | null,
      amountWithdrawn?: null,
      tokenPrice?: null,
      quoteReceived?: null,
      totalQueuedWithdrawals?: null,
      timestamp?: null
    ): WithdrawProcessedEventFilter;

    "WithdrawQueued(address,address,uint256,uint256,uint256,uint256)"(
      withdrawer?: string | null,
      beneficiary?: string | null,
      withdrawalQueueId?: BigNumberish | null,
      amountWithdrawn?: null,
      totalQueuedWithdrawals?: null,
      timestamp?: null
    ): WithdrawQueuedEventFilter;
    WithdrawQueued(
      withdrawer?: string | null,
      beneficiary?: string | null,
      withdrawalQueueId?: BigNumberish | null,
      amountWithdrawn?: null,
      totalQueuedWithdrawals?: null,
      timestamp?: null
    ): WithdrawQueuedEventFilter;
  };

  estimateGas: {
    CBTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    boardSettlement(
      insolventSettlements: BigNumberish,
      amountQuoteFreed: BigNumberish,
      amountQuoteReserved: BigNumberish,
      amountBaseFreed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cbParams(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeBase(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    freeCallCollateralAndSendPremium(
      amountBase: BigNumberish,
      recipient: string,
      totalCost: BigNumberish,
      reservedFee: BigNumberish,
      longScaleFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    freePutCollateralAndSendPremium(
      amountQuoteFreed: BigNumberish,
      recipient: string,
      totalCost: BigNumberish,
      reservedFee: BigNumberish,
      longScaleFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCBParams(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    getLpParams(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenPriceWithCheck(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPoolValueQuote(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _exchangeAdapter: string,
      _optionMarket: string,
      _liquidityToken: string,
      _greekCache: string,
      _poolHedger: string,
      _shortCollateral: string,
      _quoteAsset: string,
      _baseAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initiateDeposit(
      beneficiary: string,
      amountQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initiateWithdraw(
      beneficiary: string,
      amountLiquidityToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    insolventSettlementAmount(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationInsolventAmount(overrides?: CallOverrides): Promise<BigNumber>;

    lockCallCollateral(
      amount: BigNumberish,
      spotPrice: BigNumberish,
      freeLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockPutCollateral(
      amount: BigNumberish,
      freeLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockedCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    lpParams(overrides?: CallOverrides): Promise<BigNumber>;

    nextQueuedDepositId(overrides?: CallOverrides): Promise<BigNumber>;

    nextQueuedWithdrawalId(overrides?: CallOverrides): Promise<BigNumber>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolHedger(overrides?: CallOverrides): Promise<BigNumber>;

    processDepositQueue(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    processWithdrawalQueue(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    protectedQuote(overrides?: CallOverrides): Promise<BigNumber>;

    queuedDepositHead(overrides?: CallOverrides): Promise<BigNumber>;

    queuedDeposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queuedWithdrawalHead(overrides?: CallOverrides): Promise<BigNumber>;

    queuedWithdrawals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteAsset(overrides?: CallOverrides): Promise<BigNumber>;

    reclaimInsolventBase(
      amountBase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reclaimInsolventQuote(
      amountQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendSettlementValue(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendShortPremium(
      recipient: string,
      amountContracts: BigNumberish,
      premium: BigNumberish,
      freeLiquidity: BigNumberish,
      reservedFee: BigNumberish,
      isCall: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCircuitBreakerParameters(
      _cbParams: LiquidityPool.CircuitBreakerParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidityPoolParameters(
      _lpParams: LiquidityPool.LiquidityPoolParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolHedger(
      newPoolHedger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalOutstandingSettlements(overrides?: CallOverrides): Promise<BigNumber>;

    totalQueuedDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    totalQueuedWithdrawals(overrides?: CallOverrides): Promise<BigNumber>;

    transferQuoteToHedge(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCBs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLiquidationInsolvency(
      insolvencyAmountInQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CBTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    boardSettlement(
      insolventSettlements: BigNumberish,
      amountQuoteFreed: BigNumberish,
      amountQuoteReserved: BigNumberish,
      amountBaseFreed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cbParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeBase(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    freeCallCollateralAndSendPremium(
      amountBase: BigNumberish,
      recipient: string,
      totalCost: BigNumberish,
      reservedFee: BigNumberish,
      longScaleFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    freePutCollateralAndSendPremium(
      amountQuoteFreed: BigNumberish,
      recipient: string,
      totalCost: BigNumberish,
      reservedFee: BigNumberish,
      longScaleFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCBParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLpParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenPriceWithCheck(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPoolValueQuote(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalTokenSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _exchangeAdapter: string,
      _optionMarket: string,
      _liquidityToken: string,
      _greekCache: string,
      _poolHedger: string,
      _shortCollateral: string,
      _quoteAsset: string,
      _baseAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initiateDeposit(
      beneficiary: string,
      amountQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initiateWithdraw(
      beneficiary: string,
      amountLiquidityToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    insolventSettlementAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationInsolventAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockCallCollateral(
      amount: BigNumberish,
      spotPrice: BigNumberish,
      freeLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockPutCollateral(
      amount: BigNumberish,
      freeLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockedCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextQueuedDepositId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextQueuedWithdrawalId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolHedger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processDepositQueue(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    processWithdrawalQueue(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    protectedQuote(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queuedDepositHead(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queuedDeposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queuedWithdrawalHead(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queuedWithdrawals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reclaimInsolventBase(
      amountBase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reclaimInsolventQuote(
      amountQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendSettlementValue(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendShortPremium(
      recipient: string,
      amountContracts: BigNumberish,
      premium: BigNumberish,
      freeLiquidity: BigNumberish,
      reservedFee: BigNumberish,
      isCall: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCircuitBreakerParameters(
      _cbParams: LiquidityPool.CircuitBreakerParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityPoolParameters(
      _lpParams: LiquidityPool.LiquidityPoolParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolHedger(
      newPoolHedger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalOutstandingSettlements(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalQueuedDeposits(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalQueuedWithdrawals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferQuoteToHedge(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCBs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLiquidationInsolvency(
      insolvencyAmountInQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
