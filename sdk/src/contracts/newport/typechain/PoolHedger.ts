/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace GMXFuturesPoolHedger {
  export type PositionDetailsStruct = {
    size: BigNumberish;
    collateral: BigNumberish;
    averagePrice: BigNumberish;
    entryFundingRate: BigNumberish;
    unrealisedPnl: BigNumberish;
    lastIncreasedTime: BigNumberish;
    isLong: boolean;
  };

  export type PositionDetailsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    size: BigNumber;
    collateral: BigNumber;
    averagePrice: BigNumber;
    entryFundingRate: BigNumber;
    unrealisedPnl: BigNumber;
    lastIncreasedTime: BigNumber;
    isLong: boolean;
  };

  export type CurrentPositionsStruct = {
    longPosition: GMXFuturesPoolHedger.PositionDetailsStruct;
    shortPosition: GMXFuturesPoolHedger.PositionDetailsStruct;
    amountOpen: BigNumberish;
    isLong: boolean;
  };

  export type CurrentPositionsStructOutput = [
    GMXFuturesPoolHedger.PositionDetailsStructOutput,
    GMXFuturesPoolHedger.PositionDetailsStructOutput,
    BigNumber,
    boolean
  ] & {
    longPosition: GMXFuturesPoolHedger.PositionDetailsStructOutput;
    shortPosition: GMXFuturesPoolHedger.PositionDetailsStructOutput;
    amountOpen: BigNumber;
    isLong: boolean;
  };

  export type FuturesPoolHedgerParametersStruct = {
    acceptableSpotSlippage: BigNumberish;
    deltaThreshold: BigNumberish;
    marketDepthBuffer: BigNumberish;
    targetLeverage: BigNumberish;
    leverageBuffer: BigNumberish;
    minCancelDelay: BigNumberish;
    vaultLiquidityCheckEnabled: boolean;
  };

  export type FuturesPoolHedgerParametersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    acceptableSpotSlippage: BigNumber;
    deltaThreshold: BigNumber;
    marketDepthBuffer: BigNumber;
    targetLeverage: BigNumber;
    leverageBuffer: BigNumber;
    minCancelDelay: BigNumber;
    vaultLiquidityCheckEnabled: boolean;
  };
}

export declare namespace PoolHedger {
  export type PoolHedgerParametersStruct = {
    interactionDelay: BigNumberish;
    hedgeCap: BigNumberish;
  };

  export type PoolHedgerParametersStructOutput = [BigNumber, BigNumber] & {
    interactionDelay: BigNumber;
    hedgeCap: BigNumber;
  };
}

export interface PoolHedgerInterface extends utils.Interface {
  contractName: "PoolHedger";
  functions: {
    "GMX_PRICE_PRECISION()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "baseAsset()": FunctionFragment;
    "canHedge(uint256,bool)": FunctionFragment;
    "cancelPendingOrder()": FunctionFragment;
    "exchangeAdapter()": FunctionFragment;
    "futuresPoolHedgerParams()": FunctionFragment;
    "getAllPositionsValue()": FunctionFragment;
    "getCappedExpectedHedge()": FunctionFragment;
    "getCurrentHedgedNetDelta()": FunctionFragment;
    "getCurrentLeverage()": FunctionFragment;
    "getHedgingLiquidity(uint256)": FunctionFragment;
    "getPoolHedgerParams()": FunctionFragment;
    "getPositions()": FunctionFragment;
    "gmxPositionCallback(bytes32,bool,bool)": FunctionFragment;
    "greekCache()": FunctionFragment;
    "hasPendingDecrease()": FunctionFragment;
    "hasPendingIncrease()": FunctionFragment;
    "hedgeDelta()": FunctionFragment;
    "init(address,address,address,address,address,address,address,address)": FunctionFragment;
    "lastInteraction()": FunctionFragment;
    "lastOrderTimestamp()": FunctionFragment;
    "nominateNewOwner(address)": FunctionFragment;
    "nominatedOwner()": FunctionFragment;
    "optionMarket()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOrderKey()": FunctionFragment;
    "positionRouter()": FunctionFragment;
    "quoteAsset()": FunctionFragment;
    "recoverEth(address)": FunctionFragment;
    "referralCode()": FunctionFragment;
    "resetInteractionDelay()": FunctionFragment;
    "router()": FunctionFragment;
    "sendAllFundsToLP()": FunctionFragment;
    "setFuturesPoolHedgerParams((uint256,uint256,uint256,uint256,uint256,uint256,bool))": FunctionFragment;
    "setPoolHedgerParams((uint256,uint256))": FunctionFragment;
    "setReferralCode(bytes32)": FunctionFragment;
    "updateCollateral()": FunctionFragment;
    "vault()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "GMX_PRICE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baseAsset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "canHedge",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPendingOrder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeAdapter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "futuresPoolHedgerParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPositionsValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCappedExpectedHedge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentHedgedNetDelta",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentLeverage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHedgingLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolHedgerParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPositions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gmxPositionCallback",
    values: [BytesLike, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "greekCache",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasPendingDecrease",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasPendingIncrease",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hedgeDelta",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string, string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastInteraction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastOrderTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nominateNewOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optionMarket",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOrderKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positionRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteAsset",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "recoverEth", values: [string]): string;
  encodeFunctionData(
    functionFragment: "referralCode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetInteractionDelay",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sendAllFundsToLP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFuturesPoolHedgerParams",
    values: [GMXFuturesPoolHedger.FuturesPoolHedgerParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolHedgerParams",
    values: [PoolHedger.PoolHedgerParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferralCode",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "GMX_PRICE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canHedge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelPendingOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "futuresPoolHedgerParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPositionsValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCappedExpectedHedge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentHedgedNetDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHedgingLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolHedgerParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gmxPositionCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "greekCache", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasPendingDecrease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPendingIncrease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hedgeDelta", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastInteraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastOrderTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominateNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optionMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOrderKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quoteAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recoverEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetInteractionDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendAllFundsToLP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFuturesPoolHedgerParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolHedgerParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "BaseReturnedToLP(uint256)": EventFragment;
    "CollateralOrderPosted(bytes32,bool,int256)": EventFragment;
    "GMXPositionCallback(bytes32,bool,bool,tuple)": EventFragment;
    "HedgerPosition(tuple)": EventFragment;
    "MaxLeverageSet(uint256)": EventFragment;
    "OrderCanceled(bytes32,bool)": EventFragment;
    "OrderPosted(bytes32,uint256,uint256,bool,bool)": EventFragment;
    "OwnerChanged(address,address)": EventFragment;
    "OwnerNominated(address)": EventFragment;
    "PoolHedgerParametersSet(tuple)": EventFragment;
    "PositionUpdated(int256,int256,uint256,bool)": EventFragment;
    "QuoteReturnedToLP(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BaseReturnedToLP"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralOrderPosted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GMXPositionCallback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HedgerPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxLeverageSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderPosted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerNominated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolHedgerParametersSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuoteReturnedToLP"): EventFragment;
}

export type BaseReturnedToLPEvent = TypedEvent<
  [BigNumber],
  { amountBase: BigNumber }
>;

export type BaseReturnedToLPEventFilter =
  TypedEventFilter<BaseReturnedToLPEvent>;

export type CollateralOrderPostedEvent = TypedEvent<
  [string, boolean, BigNumber],
  { positionKey: string; isLong: boolean; collateralDelta: BigNumber }
>;

export type CollateralOrderPostedEventFilter =
  TypedEventFilter<CollateralOrderPostedEvent>;

export type GMXPositionCallbackEvent = TypedEvent<
  [string, boolean, boolean, GMXFuturesPoolHedger.CurrentPositionsStructOutput],
  {
    positionKey: string;
    isExecuted: boolean;
    isIncrease: boolean;
    positions: GMXFuturesPoolHedger.CurrentPositionsStructOutput;
  }
>;

export type GMXPositionCallbackEventFilter =
  TypedEventFilter<GMXPositionCallbackEvent>;

export type HedgerPositionEvent = TypedEvent<
  [GMXFuturesPoolHedger.CurrentPositionsStructOutput],
  { position: GMXFuturesPoolHedger.CurrentPositionsStructOutput }
>;

export type HedgerPositionEventFilter = TypedEventFilter<HedgerPositionEvent>;

export type MaxLeverageSetEvent = TypedEvent<
  [BigNumber],
  { targetLeverage: BigNumber }
>;

export type MaxLeverageSetEventFilter = TypedEventFilter<MaxLeverageSetEvent>;

export type OrderCanceledEvent = TypedEvent<
  [string, boolean],
  { pendingOrderKey: string; success: boolean }
>;

export type OrderCanceledEventFilter = TypedEventFilter<OrderCanceledEvent>;

export type OrderPostedEvent = TypedEvent<
  [string, BigNumber, BigNumber, boolean, boolean],
  {
    positionKey: string;
    collateralDelta: BigNumber;
    sizeDelta: BigNumber;
    isLong: boolean;
    isIncrease: boolean;
  }
>;

export type OrderPostedEventFilter = TypedEventFilter<OrderPostedEvent>;

export type OwnerChangedEvent = TypedEvent<
  [string, string],
  { oldOwner: string; newOwner: string }
>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export type OwnerNominatedEvent = TypedEvent<[string], { newOwner: string }>;

export type OwnerNominatedEventFilter = TypedEventFilter<OwnerNominatedEvent>;

export type PoolHedgerParametersSetEvent = TypedEvent<
  [PoolHedger.PoolHedgerParametersStructOutput],
  { poolHedgerParams: PoolHedger.PoolHedgerParametersStructOutput }
>;

export type PoolHedgerParametersSetEventFilter =
  TypedEventFilter<PoolHedgerParametersSetEvent>;

export type PositionUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, boolean],
  {
    currentNetDelta: BigNumber;
    expectedNetDelta: BigNumber;
    modifiedDelta: BigNumber;
    isIncrease: boolean;
  }
>;

export type PositionUpdatedEventFilter = TypedEventFilter<PositionUpdatedEvent>;

export type QuoteReturnedToLPEvent = TypedEvent<
  [BigNumber],
  { amountQuote: BigNumber }
>;

export type QuoteReturnedToLPEventFilter =
  TypedEventFilter<QuoteReturnedToLPEvent>;

export interface PoolHedger extends BaseContract {
  contractName: "PoolHedger";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolHedgerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    GMX_PRICE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    baseAsset(overrides?: CallOverrides): Promise<[string]>;

    canHedge(
      arg0: BigNumberish,
      deltaIncreasing: boolean,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cancelPendingOrder(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeAdapter(overrides?: CallOverrides): Promise<[string]>;

    futuresPoolHedgerParams(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        acceptableSpotSlippage: BigNumber;
        deltaThreshold: BigNumber;
        marketDepthBuffer: BigNumber;
        targetLeverage: BigNumber;
        leverageBuffer: BigNumber;
        minCancelDelay: BigNumber;
        vaultLiquidityCheckEnabled: boolean;
      }
    >;

    getAllPositionsValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCappedExpectedHedge(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentHedgedNetDelta(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentLeverage(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, boolean, BigNumber] & {
        leverage: BigNumber;
        isLong: boolean;
        needUpdate: boolean;
        collateralDelta: BigNumber;
      }
    >;

    getHedgingLiquidity(
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        pendingDeltaLiquidity: BigNumber;
        usedDeltaLiquidity: BigNumber;
      }
    >;

    getPoolHedgerParams(
      overrides?: CallOverrides
    ): Promise<[PoolHedger.PoolHedgerParametersStructOutput]>;

    getPositions(
      overrides?: CallOverrides
    ): Promise<
      [GMXFuturesPoolHedger.CurrentPositionsStructOutput] & {
        positions: GMXFuturesPoolHedger.CurrentPositionsStructOutput;
      }
    >;

    gmxPositionCallback(
      positionKey: BytesLike,
      isExecuted: boolean,
      isIncrease: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    greekCache(overrides?: CallOverrides): Promise<[string]>;

    hasPendingDecrease(overrides?: CallOverrides): Promise<[boolean]>;

    hasPendingIncrease(overrides?: CallOverrides): Promise<[boolean]>;

    hedgeDelta(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      _liquidityPool: string,
      _optionMarket: string,
      _greekCache: string,
      _exchangeAdapter: string,
      _positionRouter: string,
      _router: string,
      _quoteAsset: string,
      _baseAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastInteraction(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastOrderTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    optionMarket(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOrderKey(overrides?: CallOverrides): Promise<[string]>;

    positionRouter(overrides?: CallOverrides): Promise<[string]>;

    quoteAsset(overrides?: CallOverrides): Promise<[string]>;

    recoverEth(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    referralCode(overrides?: CallOverrides): Promise<[string]>;

    resetInteractionDelay(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    sendAllFundsToLP(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFuturesPoolHedgerParams(
      _futuresPoolHedgerParams: GMXFuturesPoolHedger.FuturesPoolHedgerParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolHedgerParams(
      _poolHedgerParams: PoolHedger.PoolHedgerParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReferralCode(
      _referralCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCollateral(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  GMX_PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  baseAsset(overrides?: CallOverrides): Promise<string>;

  canHedge(
    arg0: BigNumberish,
    deltaIncreasing: boolean,
    overrides?: CallOverrides
  ): Promise<boolean>;

  cancelPendingOrder(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeAdapter(overrides?: CallOverrides): Promise<string>;

  futuresPoolHedgerParams(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      acceptableSpotSlippage: BigNumber;
      deltaThreshold: BigNumber;
      marketDepthBuffer: BigNumber;
      targetLeverage: BigNumber;
      leverageBuffer: BigNumber;
      minCancelDelay: BigNumber;
      vaultLiquidityCheckEnabled: boolean;
    }
  >;

  getAllPositionsValue(overrides?: CallOverrides): Promise<BigNumber>;

  getCappedExpectedHedge(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentHedgedNetDelta(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentLeverage(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, boolean, BigNumber] & {
      leverage: BigNumber;
      isLong: boolean;
      needUpdate: boolean;
      collateralDelta: BigNumber;
    }
  >;

  getHedgingLiquidity(
    spotPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      pendingDeltaLiquidity: BigNumber;
      usedDeltaLiquidity: BigNumber;
    }
  >;

  getPoolHedgerParams(
    overrides?: CallOverrides
  ): Promise<PoolHedger.PoolHedgerParametersStructOutput>;

  getPositions(
    overrides?: CallOverrides
  ): Promise<GMXFuturesPoolHedger.CurrentPositionsStructOutput>;

  gmxPositionCallback(
    positionKey: BytesLike,
    isExecuted: boolean,
    isIncrease: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  greekCache(overrides?: CallOverrides): Promise<string>;

  hasPendingDecrease(overrides?: CallOverrides): Promise<boolean>;

  hasPendingIncrease(overrides?: CallOverrides): Promise<boolean>;

  hedgeDelta(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    _liquidityPool: string,
    _optionMarket: string,
    _greekCache: string,
    _exchangeAdapter: string,
    _positionRouter: string,
    _router: string,
    _quoteAsset: string,
    _baseAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastInteraction(overrides?: CallOverrides): Promise<BigNumber>;

  lastOrderTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  nominateNewOwner(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  optionMarket(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOrderKey(overrides?: CallOverrides): Promise<string>;

  positionRouter(overrides?: CallOverrides): Promise<string>;

  quoteAsset(overrides?: CallOverrides): Promise<string>;

  recoverEth(
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  referralCode(overrides?: CallOverrides): Promise<string>;

  resetInteractionDelay(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  sendAllFundsToLP(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFuturesPoolHedgerParams(
    _futuresPoolHedgerParams: GMXFuturesPoolHedger.FuturesPoolHedgerParametersStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolHedgerParams(
    _poolHedgerParams: PoolHedger.PoolHedgerParametersStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReferralCode(
    _referralCode: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCollateral(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    GMX_PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    baseAsset(overrides?: CallOverrides): Promise<string>;

    canHedge(
      arg0: BigNumberish,
      deltaIncreasing: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancelPendingOrder(overrides?: CallOverrides): Promise<void>;

    exchangeAdapter(overrides?: CallOverrides): Promise<string>;

    futuresPoolHedgerParams(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        acceptableSpotSlippage: BigNumber;
        deltaThreshold: BigNumber;
        marketDepthBuffer: BigNumber;
        targetLeverage: BigNumber;
        leverageBuffer: BigNumber;
        minCancelDelay: BigNumber;
        vaultLiquidityCheckEnabled: boolean;
      }
    >;

    getAllPositionsValue(overrides?: CallOverrides): Promise<BigNumber>;

    getCappedExpectedHedge(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentHedgedNetDelta(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentLeverage(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, boolean, BigNumber] & {
        leverage: BigNumber;
        isLong: boolean;
        needUpdate: boolean;
        collateralDelta: BigNumber;
      }
    >;

    getHedgingLiquidity(
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        pendingDeltaLiquidity: BigNumber;
        usedDeltaLiquidity: BigNumber;
      }
    >;

    getPoolHedgerParams(
      overrides?: CallOverrides
    ): Promise<PoolHedger.PoolHedgerParametersStructOutput>;

    getPositions(
      overrides?: CallOverrides
    ): Promise<GMXFuturesPoolHedger.CurrentPositionsStructOutput>;

    gmxPositionCallback(
      positionKey: BytesLike,
      isExecuted: boolean,
      isIncrease: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    greekCache(overrides?: CallOverrides): Promise<string>;

    hasPendingDecrease(overrides?: CallOverrides): Promise<boolean>;

    hasPendingIncrease(overrides?: CallOverrides): Promise<boolean>;

    hedgeDelta(overrides?: CallOverrides): Promise<void>;

    init(
      _liquidityPool: string,
      _optionMarket: string,
      _greekCache: string,
      _exchangeAdapter: string,
      _positionRouter: string,
      _router: string,
      _quoteAsset: string,
      _baseAsset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastInteraction(overrides?: CallOverrides): Promise<BigNumber>;

    lastOrderTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    nominateNewOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    optionMarket(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOrderKey(overrides?: CallOverrides): Promise<string>;

    positionRouter(overrides?: CallOverrides): Promise<string>;

    quoteAsset(overrides?: CallOverrides): Promise<string>;

    recoverEth(receiver: string, overrides?: CallOverrides): Promise<void>;

    referralCode(overrides?: CallOverrides): Promise<string>;

    resetInteractionDelay(overrides?: CallOverrides): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    sendAllFundsToLP(overrides?: CallOverrides): Promise<void>;

    setFuturesPoolHedgerParams(
      _futuresPoolHedgerParams: GMXFuturesPoolHedger.FuturesPoolHedgerParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolHedgerParams(
      _poolHedgerParams: PoolHedger.PoolHedgerParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setReferralCode(
      _referralCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCollateral(overrides?: CallOverrides): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "BaseReturnedToLP(uint256)"(amountBase?: null): BaseReturnedToLPEventFilter;
    BaseReturnedToLP(amountBase?: null): BaseReturnedToLPEventFilter;

    "CollateralOrderPosted(bytes32,bool,int256)"(
      positionKey?: null,
      isLong?: null,
      collateralDelta?: null
    ): CollateralOrderPostedEventFilter;
    CollateralOrderPosted(
      positionKey?: null,
      isLong?: null,
      collateralDelta?: null
    ): CollateralOrderPostedEventFilter;

    "GMXPositionCallback(bytes32,bool,bool,tuple)"(
      positionKey?: null,
      isExecuted?: null,
      isIncrease?: null,
      positions?: null
    ): GMXPositionCallbackEventFilter;
    GMXPositionCallback(
      positionKey?: null,
      isExecuted?: null,
      isIncrease?: null,
      positions?: null
    ): GMXPositionCallbackEventFilter;

    "HedgerPosition(tuple)"(position?: null): HedgerPositionEventFilter;
    HedgerPosition(position?: null): HedgerPositionEventFilter;

    "MaxLeverageSet(uint256)"(targetLeverage?: null): MaxLeverageSetEventFilter;
    MaxLeverageSet(targetLeverage?: null): MaxLeverageSetEventFilter;

    "OrderCanceled(bytes32,bool)"(
      pendingOrderKey?: null,
      success?: null
    ): OrderCanceledEventFilter;
    OrderCanceled(
      pendingOrderKey?: null,
      success?: null
    ): OrderCanceledEventFilter;

    "OrderPosted(bytes32,uint256,uint256,bool,bool)"(
      positionKey?: null,
      collateralDelta?: null,
      sizeDelta?: null,
      isLong?: null,
      isIncrease?: null
    ): OrderPostedEventFilter;
    OrderPosted(
      positionKey?: null,
      collateralDelta?: null,
      sizeDelta?: null,
      isLong?: null,
      isIncrease?: null
    ): OrderPostedEventFilter;

    "OwnerChanged(address,address)"(
      oldOwner?: null,
      newOwner?: null
    ): OwnerChangedEventFilter;
    OwnerChanged(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;

    "OwnerNominated(address)"(newOwner?: null): OwnerNominatedEventFilter;
    OwnerNominated(newOwner?: null): OwnerNominatedEventFilter;

    "PoolHedgerParametersSet(tuple)"(
      poolHedgerParams?: null
    ): PoolHedgerParametersSetEventFilter;
    PoolHedgerParametersSet(
      poolHedgerParams?: null
    ): PoolHedgerParametersSetEventFilter;

    "PositionUpdated(int256,int256,uint256,bool)"(
      currentNetDelta?: null,
      expectedNetDelta?: null,
      modifiedDelta?: null,
      isIncrease?: null
    ): PositionUpdatedEventFilter;
    PositionUpdated(
      currentNetDelta?: null,
      expectedNetDelta?: null,
      modifiedDelta?: null,
      isIncrease?: null
    ): PositionUpdatedEventFilter;

    "QuoteReturnedToLP(uint256)"(
      amountQuote?: null
    ): QuoteReturnedToLPEventFilter;
    QuoteReturnedToLP(amountQuote?: null): QuoteReturnedToLPEventFilter;
  };

  estimateGas: {
    GMX_PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    baseAsset(overrides?: CallOverrides): Promise<BigNumber>;

    canHedge(
      arg0: BigNumberish,
      deltaIncreasing: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelPendingOrder(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeAdapter(overrides?: CallOverrides): Promise<BigNumber>;

    futuresPoolHedgerParams(overrides?: CallOverrides): Promise<BigNumber>;

    getAllPositionsValue(overrides?: CallOverrides): Promise<BigNumber>;

    getCappedExpectedHedge(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentHedgedNetDelta(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentLeverage(overrides?: CallOverrides): Promise<BigNumber>;

    getHedgingLiquidity(
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolHedgerParams(overrides?: CallOverrides): Promise<BigNumber>;

    getPositions(overrides?: CallOverrides): Promise<BigNumber>;

    gmxPositionCallback(
      positionKey: BytesLike,
      isExecuted: boolean,
      isIncrease: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    greekCache(overrides?: CallOverrides): Promise<BigNumber>;

    hasPendingDecrease(overrides?: CallOverrides): Promise<BigNumber>;

    hasPendingIncrease(overrides?: CallOverrides): Promise<BigNumber>;

    hedgeDelta(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      _liquidityPool: string,
      _optionMarket: string,
      _greekCache: string,
      _exchangeAdapter: string,
      _positionRouter: string,
      _router: string,
      _quoteAsset: string,
      _baseAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastInteraction(overrides?: CallOverrides): Promise<BigNumber>;

    lastOrderTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    optionMarket(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOrderKey(overrides?: CallOverrides): Promise<BigNumber>;

    positionRouter(overrides?: CallOverrides): Promise<BigNumber>;

    quoteAsset(overrides?: CallOverrides): Promise<BigNumber>;

    recoverEth(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    referralCode(overrides?: CallOverrides): Promise<BigNumber>;

    resetInteractionDelay(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    sendAllFundsToLP(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFuturesPoolHedgerParams(
      _futuresPoolHedgerParams: GMXFuturesPoolHedger.FuturesPoolHedgerParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolHedgerParams(
      _poolHedgerParams: PoolHedger.PoolHedgerParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReferralCode(
      _referralCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCollateral(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    GMX_PRICE_PRECISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    baseAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canHedge(
      arg0: BigNumberish,
      deltaIncreasing: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelPendingOrder(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeAdapter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    futuresPoolHedgerParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllPositionsValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCappedExpectedHedge(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentHedgedNetDelta(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentLeverage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHedgingLiquidity(
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolHedgerParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gmxPositionCallback(
      positionKey: BytesLike,
      isExecuted: boolean,
      isIncrease: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    greekCache(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasPendingDecrease(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasPendingIncrease(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hedgeDelta(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      _liquidityPool: string,
      _optionMarket: string,
      _greekCache: string,
      _exchangeAdapter: string,
      _positionRouter: string,
      _router: string,
      _quoteAsset: string,
      _baseAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastInteraction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastOrderTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optionMarket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOrderKey(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positionRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverEth(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    referralCode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resetInteractionDelay(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendAllFundsToLP(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFuturesPoolHedgerParams(
      _futuresPoolHedgerParams: GMXFuturesPoolHedger.FuturesPoolHedgerParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolHedgerParams(
      _poolHedgerParams: PoolHedger.PoolHedgerParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReferralCode(
      _referralCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCollateral(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
